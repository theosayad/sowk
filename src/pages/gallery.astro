---
import Layout from '../layouts/Default.astro';
import { ORIGIN } from '../lib/ld-schema.js'; // canonical origin for absolute URLs in JSON-LD

// For runtime <img src="/images/..."> paths; Astro sets "/" on Netlify, "/repo/" on GH Pages
const BASE = import.meta.env.BASE_URL;

// Page SEO props (Layout + SEO.astro will use these)
const title       = "Gallery • SOWK Guesthouse, Batroun";
const description = "A glimpse of SOWK’s stone textures, tranquil interiors and poolside moments in Smar Jbeil, Batroun.";
const url         = `${ORIGIN}/gallery`;
const heroImage   = "/images/garden.jpg";
const keywords    = "SOWK gallery, Batroun villa photos, Smar Jbeil guesthouse images";

// Gallery data (files should live under /public/images/)
const images = [
  { file: 'pool.jpg',          category: 'exterior', title: 'Little Pool Oasis',   description: 'A serene, jewel-like pool nestled in the garden at SOWK Guesthouse in Smar Jbeil, Lebanon—perfect for quiet dips and Mediterranean daydreams.', width: 800, height: 600 },
  { file: 'interior.jpg',      category: 'interior', title: 'Elegant Living Space', description: 'Thoughtfully designed interiors with modern Lebanese touches and traditional elements that create an atmosphere of refined comfort.', width: 800, height: 600 },
  { file: 'fireplace.jpg',     category: 'interior', title: 'Fireplace Lounge',     description: 'A warm and simple space with a stone fireplace and soft seating—made for quiet evenings, shared stories, and moments of stillness at SOWK Guesthouse.', width: 800, height: 600 },
  { file: 'garden.jpg',        category: 'exterior', title: 'Mediterranean Gardens', description: 'Lush gardens with native Lebanese flora and peaceful corners for relaxation, where ancient stones meet living beauty.', width: 800, height: 600 },
  { file: 'king-bedroom.jpg',  category: 'interior', title: 'King Room',            description: 'A simple, calming space with a comfortable king bed, natural textures, and thoughtful details—quietly designed for rest and ease at SOWK Guesthouse.', width: 800, height: 600 },
  { file: 'terrace.jpg',       category: 'exterior', title: 'The Hammock Terrace',  description: 'A breezy terrace designed for laid-back moments—featuring a dining table for sunset meals, two cozy hammocks, and a playful baby foot corner, all overlooking the hills of Smar Jbeil.', width: 800, height: 600 },
  { file: 'twin-room.jpg',     category: 'interior', title: 'Twin Room',            description: 'Quiet and simple, this twin room offers two single beds, soft lighting, and a clean, uncluttered design—made for slow mornings and easy rest at SOWK Guesthouse.', width: 800, height: 600 },
  { file: 'pizza-oven.jpg',    category: 'exterior', title: 'Artisan Pizza Terrace', description: 'A handcrafted wood-fire oven set against ancient Lebanese stone walls—where Mediterranean ingredients meet centuries-old culinary traditions under the open sky.', width: 800, height: 600 },
];

const categories = ['all', ...new Set(images.map(img => img.category))];

// Helper for absolute URLs in JSON-LD (do NOT use BASE inside JSON-LD)
const abs = (p: string) => p.startsWith('http') ? p : new URL(p, ORIGIN).href;

// JSON-LD: ItemList of ImageObject (clean, standards-compliant)
const imageListSchema = {
  "@context": "https://schema.org",
  "@type": "ItemList",
  "@id": `${ORIGIN}/gallery/#images`,
  "name": "SOWK Gallery",
  "numberOfItems": images.length,
  "itemListElement": images.map((img, i) => ({
    "@type": "ListItem",
    "position": i + 1,
    "item": {
      "@type": "ImageObject",
      "@id": `${ORIGIN}/gallery#image-${i + 1}`,
      "contentUrl": abs(`/images/${img.file}`),
      "url":        abs(`/images/${img.file}`),
      "name":       img.title,
      "caption":    img.description,
      "width":      img.width,
      "height":     img.height
    }
  }))
};

// Optional: refine page container type to also be a CollectionPage (merges with layout’s WebPage)
const collectionPatch = {
  "@context": "https://schema.org",
  "@id": `${ORIGIN}/gallery/#webpage`,
  "@type": ["WebPage", "CollectionPage"]
};
---

<Layout
  title={title}
  description={description}
  url={url}
  image={heroImage}
  type="website"
  keywords={keywords}
>
  <Fragment slot="head">
    <!-- JSON-LD extras (close tags explicitly; no self-closing <script/>) -->
    <script type="application/ld+json" set:html={JSON.stringify(imageListSchema)}></script>
    <script type="application/ld+json" set:html={JSON.stringify(collectionPatch)}></script>

    <!-- Preload a few hero thumbs for snappy first paint -->
    <link rel="preload" as="image" href={`${BASE}images/pool.jpg`} />
    <link rel="preload" as="image" href={`${BASE}images/interior.jpg`} />
    <link rel="preload" as="image" href={`${BASE}images/fireplace.jpg`} />
    <link rel="preload" as="image" href={`${BASE}images/garden.jpg`} />

    <meta name="robots" content="index, follow, max-image-preview:large" />
    <meta property="og:locale" content="en_US" />
    <meta name="twitter:card" content="summary_large_image" />
  </Fragment>

  <!-- Hero -->
  <section class="gallery-hero">
    <div class="hero-content">
      <span class="gallery-accent">Visual Journey</span>
      <h1 class="gallery-title">Where Stories Unfold in Stone</h1>
      <p class="gallery-intro">
        Each frame captures the essence of Lebanese hospitality—from ancient walls that whisper history to modern comforts that embrace the soul
      </p>
    </div>
  </section>

  <!-- Main -->
  <section class="gallery-main">
    <div class="gallery-controls">
      <div class="collection-info">
        <h2 class="collection-title">Curated Moments</h2>
        <div class="image-count" aria-live="polite">{images.length} compositions</div>
      </div>

      <div class="filter-tabs" role="tablist" aria-label="Filter gallery by category">
        {categories.map((category) => (
          <button
            class={`filter-btn ${category === 'all' ? 'active' : ''}`}
            data-category={category}
            role="tab"
            aria-selected={category === 'all' ? 'true' : 'false'}
            aria-controls="gallery-grid"
          >
            {category === 'all' ? 'All Spaces' :
             category === 'interior' ? 'Intimate Interiors' : 'Garden Sanctuaries'}
          </button>
        ))}
      </div>
    </div>

    <div class="gallery-grid" id="gallery-grid" role="tabpanel">
      {images.map((image, index) => (
        <article class="gallery-item" data-category={image.category} data-index={index} id={`image-${index + 1}`}>
          <div class="image-frame">
            <img
              src={`${BASE}images/${image.file}`}
              alt={`${image.title} at SOWK Guesthouse — ${image.description}`}
              loading={index < 4 ? "eager" : "lazy"}
              decoding={index < 4 ? "sync" : "async"}
              width={image.width}
              height={image.height}
              sizes="(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw"
            />
            <div class="image-overlay">
              <div class="image-details">
                <h3 class="image-title">{image.title}</h3>
                <p class="image-description">{image.description}</p>
                <button class="view-detail-btn" data-index={index} aria-label={`View ${image.title} in full screen`}>
                  Explore
                </button>
              </div>
            </div>
          </div>
        </article>
      ))}
    </div>
  </section>

  <!-- Lightbox -->
  <div class="lightbox" id="lightbox" role="dialog" aria-modal="true" aria-hidden="true">
    <div class="lightbox-backdrop"></div>
    <div class="lightbox-container">
      <div class="lightbox-header">
        <button class="lightbox-close" aria-label="Close gallery">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>

      <div class="lightbox-content">
        <div class="lightbox-image-container">
          <img class="lightbox-image" src="" alt="" loading="lazy" />
          <button class="nav-btn nav-prev" aria-label="Previous image">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="15,18 9,12 15,6"></polyline>
            </svg>
          </button>
          <button class="nav-btn nav-next" aria-label="Next image">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9,18 15,12 9,6"></polyline>
            </svg>
          </button>
        </div>

        <div class="lightbox-info">
          <h2 class="lightbox-title"></h2>
          <p class="lightbox-description"></p>
        </div>
      </div>
    </div>
  </div>

  <style>
    :root {
      --font-display: 'Playfair Display', Georgia, serif;
      --font-body: 'Inter', -apple-system, sans-serif;
      --font-accent: 'Poppins', sans-serif;
      --color-primary: #2C3E35;
      --color-accent: #C9A876;
      --color-gold: #D4AF37;
      --color-stone: #F8F6F1;
      --color-mist: #FAFAFA;
      --color-charcoal: #3A3A3A;
      --border-radius: 16px;
      --shadow-light: 0 4px 20px rgba(44, 62, 53, 0.06);
      --shadow-hover: 0 20px 40px rgba(44, 62, 53, 0.15);
    }

    body { font-family: var(--font-body); background-color: var(--color-mist); margin: 0; line-height: 1.6; }

    .gallery-hero {
      height: 60vh; display: flex; align-items: center; justify-content: center;
      background: linear-gradient(135deg, var(--color-primary) 0%, #1E2E25 100%);
      color: white; text-align: center; padding: 2rem; position: relative;
    }
    .gallery-hero::before {
      content: ''; position: absolute; inset: 0;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><defs><pattern id="grain" patternUnits="userSpaceOnUse" width="100" height="100"><circle cx="50" cy="50" r="0.5" fill="white" opacity="0.03"/></pattern></defs><rect width="100" height="100" fill="url(%23grain)"/></svg>');
    }
    .hero-content { position: relative; z-index: 1; }

    .gallery-accent {
      font-family: var(--font-accent); font-size: 0.9rem; font-weight: 600;
      color: var(--color-accent); text-transform: uppercase; letter-spacing: 0.15em; display: block; margin-bottom: 1rem;
    }
    .gallery-title {
      font-family: var(--font-display); font-size: clamp(2.5rem, 8vw, 4rem); font-weight: 400; margin: 0 0 1.5rem 0; line-height: 1.1;
    }
    .gallery-intro { font-size: clamp(1.1rem, 3vw, 1.3rem); max-width: 600px; margin: 0 auto; opacity: 0.9; }

    .gallery-main { max-width: 1400px; margin: 0 auto; padding: 4rem 2rem; }
    .gallery-controls { margin-bottom: 3rem; text-align: center; }
    .collection-title {
      font-family: var(--font-display); font-size: clamp(1.8rem, 4vw, 2.5rem); font-weight: 400; color: var(--color-primary); margin: 0 0 0.5rem 0;
    }
    .image-count {
      font-family: var(--font-accent); font-size: 0.9rem; color: var(--color-accent); font-weight: 500; text-transform: uppercase; letter-spacing: 0.1em; margin-bottom: 2rem;
    }

    .filter-tabs { display: flex; gap: 0.5rem; justify-content: center; flex-wrap: wrap; }
    .filter-btn {
      padding: 0.875rem 1.5rem; border: 1px solid rgba(44, 62, 53, 0.1); background: white; color: var(--color-charcoal);
      font-family: var(--font-accent); font-weight: 500; font-size: 0.9rem; border-radius: 8px; cursor: pointer; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); position: relative; overflow: hidden;
    }
    .filter-btn::before { content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent); transition: left 0.6s; }
    .filter-btn:hover::before { left: 100%; }
    .filter-btn:hover { background: var(--color-accent); color: white; transform: translateY(-2px); box-shadow: var(--shadow-light); }
    .filter-btn.active { background: var(--color-accent); color: white; transform: translateY(-1px); }

    .gallery-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 2rem; margin-top: 2rem; }

    .gallery-item { transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1); opacity: 1; transform: scale(1); }
    .gallery-item.hidden { opacity: 0; transform: scale(0.8); pointer-events: none; }

    .image-frame {
      position: relative; border-radius: var(--border-radius); overflow: hidden; background: white; cursor: pointer;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1); box-shadow: var(--shadow-light);
      border: 1px solid rgba(44, 62, 53, 0.08);
    }
    .image-frame:hover { transform: translateY(-8px); box-shadow: var(--shadow-hover); }
    .image-frame img { width: 100%; height: 300px; object-fit: cover; display: block; transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1); }
    .image-frame:hover img { transform: scale(1.05); }

    .image-overlay {
      position: absolute; inset: 0;
      background: linear-gradient(to bottom, transparent 0%, transparent 40%, rgba(0,0,0,0.3) 70%, rgba(0,0,0,0.8) 100%);
      opacity: 0; transition: opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1); display: flex; align-items: flex-end;
    }
    .image-frame:hover .image-overlay { opacity: 1; }

    .image-details { padding: 2rem; color: white; width: 100%; transform: translateY(20px); transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1); }
    .image-frame:hover .image-details { transform: translateY(0); }
    .image-title { font-family: var(--font-display); font-size: 1.3rem; font-weight: 500; margin: 0 0 0.5rem 0; line-height: 1.2; }
    .image-description { font-size: 0.9rem; margin: 0 0 1rem 0; opacity: 0.9; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; line-height: 1.4; }

    .view-detail-btn {
      background: var(--color-accent); border: none; color: white; padding: 0.75rem 1.25rem; border-radius: 8px; cursor: pointer;
      font-family: var(--font-accent); font-size: 0.85rem; font-weight: 500; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); position: relative; overflow: hidden;
    }
    .view-detail-btn::before {
      content: ''; position: absolute; top: 50%; left: 50%; width: 0; height: 0; background: rgba(255,255,255,0.3); border-radius: 50%;
      transform: translate(-50%, -50%); transition: width 0.3s, height 0.3s;
    }
    .view-detail-btn:hover::before { width: 300px; height: 300px; }
    .view-detail-btn:hover { background: var(--color-gold); transform: translateY(-2px); }

    /* Lightbox */
    .lightbox { position: fixed; inset: 0; z-index: 1000; opacity: 0; visibility: hidden; transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1); backdrop-filter: blur(0px); }
    .lightbox.active { opacity: 1; visibility: visible; backdrop-filter: blur(8px); }
    .lightbox-backdrop { position: absolute; inset: 0; background: rgba(255, 255, 255, 0.95); cursor: pointer; transition: background 0.4s ease; }
    .lightbox-container { position: relative; width: 100%; height: 100%; display: flex; flex-direction: column; }
    .lightbox-header { position: absolute; top: 2rem; right: 2rem; z-index: 30; }
    .lightbox-close {
      background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(15px); border: 1px solid rgba(44, 62, 53, 0.1);
      width: 48px; height: 48px; border-radius: 50%; cursor: pointer; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); color: var(--color-charcoal);
      display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 20px rgba(44, 62, 53, 0.08);
    }
    .lightbox-close:hover { background: white; color: var(--color-primary); transform: scale(1.05); box-shadow: 0 8px 32px rgba(44, 62, 53, 0.12); }

    .lightbox-content { flex: 1; display: flex; flex-direction: column; align-items: center; justify-content: center; padding: 2rem; position: relative; cursor: pointer; }
    .lightbox-image-container { position: relative; display: flex; align-items: center; justify-content: center; flex: 1; width: 100%; max-width: 90vw; max-height: 70vh; }
    .lightbox-image { max-width: 100%; max-height: 100%; width: auto; height: auto; object-fit: contain; border-radius: 12px; box-shadow: 0 25px 80px rgba(44, 62, 53, 0.2);
      transition: opacity 0.3s ease, transform 0.4s cubic-bezier(0.4, 0, 0.2, 1); cursor: default; }
    .lightbox-image.changing { opacity: 0; transform: scale(0.95); }

    .nav-btn {
      position: absolute; top: 50%; transform: translateY(-50%); background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(10px);
      border: 1px solid rgba(44, 62, 53, 0.1); width: 56px; height: 56px; border-radius: 50%; cursor: pointer; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      color: var(--color-charcoal); display: flex; align-items: center; justify-content: center; box-shadow: 0 4px 20px rgba(44, 62, 53, 0.08); z-index: 20;
    }
    .nav-btn:hover { background: white; color: var(--color-primary); transform: translateY(-50%) scale(1.1); box-shadow: 0 8px 32px rgba(44, 62, 53, 0.15); }
    .nav-prev { left: -80px; } .nav-next { right: -80px; }

    .lightbox-info {
      margin-top: 2rem; text-align: center; max-width: 600px; background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(15px);
      padding: 1.5rem 2rem; border-radius: 16px; box-shadow: 0 8px 32px rgba(44, 62, 53, 0.08); border: 1px solid rgba(44, 62, 53, 0.05);
    }
    .lightbox-title { font-family: var(--font-display); font-size: 1.5rem; font-weight: 400; margin: 0 0 0.75rem 0; color: var(--color-primary); line-height: 1.3; }
    .lightbox-description { font-size: 1rem; margin: 0; color: var(--color-charcoal); line-height: 1.5; opacity: 0.85; }

    @media (max-width: 768px) {
      .gallery-grid { grid-template-columns: 1fr; gap: 1.5rem; }
      .filter-tabs { flex-direction: column; align-items: center; gap: 0.75rem; }
      .filter-btn { width: 220px; }
      .image-overlay { position: static; opacity: 1; background: white; color: var(--color-primary); }
      .image-details { color: var(--color-primary); padding: 1.5rem; transform: none; }
      .image-title { color: var(--color-primary); }
      .image-description { color: var(--color-charcoal); opacity: 0.8; -webkit-line-clamp: 3; }
      .view-detail-btn { margin-top: 0.5rem; }

      .lightbox-content { padding: 1rem; height: 100vh; overflow: hidden; }
      .lightbox-header { top: 1rem; right: 1rem; }
      .lightbox-close { width: 44px; height: 44px; }
      .lightbox-image-container { max-width: 100vw; max-height: 60vh; margin-bottom: 1rem; }
      .nav-btn { width: 48px; height: 48px; position: fixed; top: 50%; transform: translateY(-50%); }
      .nav-prev { left: 1rem; } .nav-next { right: 1rem; }

      .lightbox-info { position: fixed; bottom: 0; left: 0; right: 0; margin: 0; border-radius: 16px 16px 0 0; max-width: none; padding: 1.5rem; max-height: 35vh; overflow-y: auto; }
      .lightbox-title { font-size: 1.3rem; } .lightbox-description { font-size: 0.9rem; }
      .lightbox-backdrop { touch-action: manipulation; } .lightbox-image { touch-action: manipulation; user-select: none; }
    }

    @media (max-width: 480px) {
      .gallery-main { padding: 3rem 1rem; } .gallery-hero { height: 50vh; padding: 1rem; } .lightbox-info { padding: 1rem; }
    }

    @media (prefers-reduced-motion: reduce) {
      * { animation-duration: 0.01ms !important; animation-iteration-count: 1 !important; transition-duration: 0.01ms !important; }
    }

    .filter-btn:focus, .view-detail-btn:focus, .lightbox-close:focus, .nav-btn:focus, .gallery-item:focus {
      outline: 2px solid var(--color-accent); outline-offset: 2px;
    }
    .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0, 0, 0, 0); white-space: nowrap; border: 0; }
  </style>

  <!-- Keep scripts inline & minimal; no custom lazy loader (previews disappearing bug) -->
  <script is:inline>
    class Gallery {
      constructor() {
        this.images = Array.from(document.querySelectorAll('.gallery-item')).map(item => ({
          element: item,
          category: item.dataset.category,
          index: parseInt(item.dataset.index, 10)
        }));
        this.currentIndex = 0;
        this.lightbox = document.getElementById('lightbox');
        this.isLightboxOpen = false;
        this.touchStartX = 0;
        this.touchEndX = 0;
        this.init();
      }

      init() {
        this.setupEventListeners();
        this.updateImageCount();
      }

      setupEventListeners() {
        document.querySelectorAll('.filter-btn').forEach(btn => {
          btn.addEventListener('click', (e) => this.handleFilter(e));
        });

        document.querySelectorAll('.gallery-item').forEach(item => {
          item.addEventListener('click', (e) => this.handleImageClick(e));
          item.setAttribute('tabindex', '0');
          item.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' || e.key === ' ') {
              e.preventDefault();
              this.handleImageClick(e);
            }
          });
        });

        document.querySelector('.lightbox-close').addEventListener('click', () => this.closeLightbox());
        document.querySelector('.lightbox-backdrop').addEventListener('click', () => this.closeLightbox());
        document.querySelector('.lightbox-content').addEventListener('click', (e) => {
          if (e.target === e.currentTarget) this.closeLightbox();
        });

        document.querySelector('.nav-prev').addEventListener('click', (e) => { e.stopPropagation(); this.previousImage(); });
        document.querySelector('.nav-next').addEventListener('click', (e) => { e.stopPropagation(); this.nextImage(); });

        document.addEventListener('keydown', (e) => {
          if (!this.isLightboxOpen) return;
          if (e.key === 'Escape') this.closeLightbox();
          if (e.key === 'ArrowLeft') { e.preventDefault(); this.previousImage(); }
          if (e.key === 'ArrowRight') { e.preventDefault(); this.nextImage(); }
        });

        this.lightbox.addEventListener('touchstart', (e) => { this.touchStartX = e.changedTouches[0].screenX; }, { passive: true });
        this.lightbox.addEventListener('touchend',   (e) => { this.touchEndX   = e.changedTouches[0].screenX; this.handleSwipe(); }, { passive: true });

        document.querySelector('.lightbox-image').addEventListener('click', (e) => e.stopPropagation());
        document.querySelector('.lightbox-info').addEventListener('click', (e) => e.stopPropagation());

        // Close when clicking whitespace inside the image container (but not the image or arrows)
        const imgContainer = document.querySelector('.lightbox-image-container');
        imgContainer.addEventListener('click', (e) => {
          if (e.target === e.currentTarget) {
            this.closeLightbox();
          }
        });
      }

      handleSwipe() {
        const diff = this.touchStartX - this.touchEndX;
        if (Math.abs(diff) > 50) diff > 0 ? this.nextImage() : this.previousImage();
      }

      handleFilter(e) {
        const category = e.currentTarget.dataset.category;
        document.querySelectorAll('.filter-btn').forEach(btn => {
          btn.classList.toggle('active', btn === e.currentTarget);
          btn.setAttribute('aria-selected', btn === e.currentTarget ? 'true' : 'false');
        });

        let visibleCount = 0;
        this.images.forEach(({ element }) => {
          const match = (category === 'all') || (element.dataset.category === category);
          element.classList.toggle('hidden', !match);
          if (match) visibleCount++;
        });

        this.updateImageCount(visibleCount, category);
      }

      updateImageCount(count = this.images.length, category = 'all') {
        const el = document.querySelector('.image-count');
        const label = category === 'all' ? 'compositions'
                    : category === 'interior' ? 'intimate spaces'
                    : 'garden views';
        el.style.opacity = '0';
        setTimeout(() => { el.textContent = `${count} ${label}`; el.style.opacity = '1'; }, 150);
      }

      handleImageClick(e) {
        const item = e.currentTarget.closest('.gallery-item');
        this.currentIndex = parseInt(item.dataset.index, 10);
        this.openLightbox();
      }

      openLightbox() {
        this.isLightboxOpen = true;
        this.lightbox.classList.add('active');
        this.lightbox.setAttribute('aria-hidden', 'false');
        document.body.style.overflow = 'hidden';
        setTimeout(() => document.querySelector('.lightbox-close').focus(), 100);
        this.updateLightboxContent();
        this.announce('Gallery lightbox opened. Use arrow keys to navigate, escape to close.');
      }

      closeLightbox() {
        this.isLightboxOpen = false;
        this.lightbox.classList.remove('active');
        this.lightbox.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
        setTimeout(() => {
          const currentItem = document.querySelector(`[data-index="${this.currentIndex}"]`);
          if (currentItem) currentItem.focus();
        }, 100);
      }

      previousImage() { this.currentIndex = (this.currentIndex > 0) ? this.currentIndex - 1 : this.images.length - 1; this.updateLightboxContent(); }
      nextImage()     { this.currentIndex = (this.currentIndex < this.images.length - 1) ? this.currentIndex + 1 : 0; this.updateLightboxContent(); }

      updateLightboxContent() {
        const currentItem = this.images.find(img => img.index === this.currentIndex);
        if (!currentItem) return;

        const imgEl = currentItem.element.querySelector('img');
        const title = currentItem.element.querySelector('.image-title').textContent;
        const desc  = currentItem.element.querySelector('.image-description').textContent;

        const lbImg = document.querySelector('.lightbox-image');
        lbImg.classList.add('changing');

        setTimeout(() => {
          lbImg.src = imgEl.src;
          lbImg.alt = `${title} at SOWK Guesthouse — ${desc}`;
          lbImg.onload = () => lbImg.classList.remove('changing');
          setTimeout(() => lbImg.classList.remove('changing'), 200); // safety
        }, 100);

        document.querySelector('.lightbox-title').textContent = title;
        document.querySelector('.lightbox-description').textContent = desc;

        const prevBtn = document.querySelector('.nav-prev');
        const nextBtn = document.querySelector('.nav-next');
        const hasMultiple = this.images.length > 1;
        prevBtn.style.opacity = hasMultiple ? '1' : '0.3';
        nextBtn.style.opacity = hasMultiple ? '1' : '0.3';

        history.replaceState(null, '', `#image-${this.currentIndex + 1}`);
      }

      announce(message) {
        const el = document.createElement('div');
        el.setAttribute('aria-live', 'polite');
        el.setAttribute('aria-atomic', 'true');
        el.className = 'sr-only';
        el.textContent = message;
        document.body.appendChild(el);
        setTimeout(() => document.body.contains(el) && document.body.removeChild(el), 1000);
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const gallery = new Gallery();

      // Open lightbox directly if URL has #image-N
      if (window.location.hash) {
        const m = window.location.hash.match(/image-(\d+)/);
        if (m) {
          const idx = parseInt(m[1], 10) - 1;
          if (idx >= 0 && idx < gallery.images.length) {
            setTimeout(() => { gallery.currentIndex = idx; gallery.openLightbox(); }, 300);
          }
        }
      }

      gallery.announce(`Gallery page loaded. ${gallery.images.length} images available.`);
    });
  </script>
</Layout>