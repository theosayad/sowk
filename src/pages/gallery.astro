---
import Layout from '../layouts/Default.astro';

const images = [
  { file: 'pool.jpg', category: 'exterior', title: 'Infinity Pool Oasis', description: 'Stunning infinity pool overlooking the Mediterranean coastline at SOWK Guesthouse in Smar Jbeil, Lebanon' },
  { file: 'sunset.jpg', category: 'views', title: 'Golden Hour Magic', description: 'Breathtaking sunset views from our panoramic terrace in the Lebanese mountains' },
  { file: 'interior.jpg', category: 'interior', title: 'Elegant Living Space', description: 'Thoughtfully designed interiors with modern Lebanese touches and traditional elements' },
  { file: 'fireplace.jpg', category: 'interior', title: 'Cozy Fireplace Lounge', description: 'Intimate gathering space with traditional stone fireplace and comfortable seating' },
  { file: 'citadel.jpg', category: 'views', title: 'Historic Citadel Views', description: 'Ancient Lebanese architecture meets modern comfort with views of historic citadel' },
  { file: 'breakfast.jpg', category: 'dining', title: 'Morning Delights', description: 'Fresh local Lebanese breakfast served with mountain views and traditional hospitality' },
  { file: 'garden.jpg', category: 'exterior', title: 'Mediterranean Gardens', description: 'Lush gardens with native Lebanese flora and peaceful corners for relaxation' },
  { file: 'bedroom.jpg', category: 'interior', title: 'Serene Bedroom Suite', description: 'Peaceful retreat with premium linens, natural light, and mountain views' },
  { file: 'terrace.jpg', category: 'exterior', title: 'Panoramic Terrace', description: 'Expansive outdoor living space with spectacular vistas of Smar Jbeil and beyond' },
];

const categories = ['all', ...new Set(images.map(img => img.category))];
const toWebp = (file: string) => file.replace('.jpg', '.webp');

// Generate structured data for SEO
const structuredData = {
  "@context": "https://schema.org",
  "@type": "ImageGallery",
  "name": "SOWK Guesthouse Gallery",
  "description": "Visual journey through our Lebanese guesthouse in Smar Jbeil featuring luxury accommodations, stunning views, and authentic Lebanese hospitality",
  "url": "https://sowk.org/gallery",
  "image": images.map(img => ({
    "@type": "ImageObject",
    "url": `/images/${img.file}`,
    "name": img.title,
    "description": img.description,
    "contentLocation": "Smar Jbeil, Lebanon"
  }))
};
---

<Layout title="Gallery Â· SOWK Guesthouse">
  <head>
    <!-- SEO Meta Tags -->
    <meta name="description" content="Explore our luxury guesthouse gallery featuring stunning views, elegant interiors, and authentic Lebanese hospitality in Smar Jbeil. Book your unforgettable mountain retreat today." />
    <meta name="keywords" content="Lebanon guesthouse, Smar Jbeil accommodation, luxury hotel Lebanon, mountain views Lebanon, Lebanese hospitality, boutique hotel" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:title" content="SOWK Guesthouse Gallery - Luxury Lebanese Mountain Retreat" />
    <meta property="og:description" content="Discover breathtaking views, elegant interiors, and authentic Lebanese hospitality at our luxury guesthouse in Smar Jbeil." />
    <meta property="og:image" content="/images/pool.jpg" />
    <meta property="og:url" content="https://sowk.org/gallery" />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:title" content="SOWK Guesthouse Gallery - Luxury Lebanese Mountain Retreat" />
    <meta property="twitter:description" content="Discover breathtaking views, elegant interiors, and authentic Lebanese hospitality." />
    <meta property="twitter:image" content="/images/pool.jpg" />
    
    <!-- Structured Data -->
    <script type="application/ld+json" set:html={JSON.stringify(structuredData)} />
    
    <!-- Preload critical images -->
    <link rel="preload" as="image" href="/images/pool.webp" type="image/webp" />
    <link rel="preload" as="image" href="/images/sunset.webp" type="image/webp" />
  </head>

  <section class="gallery-hero">
    <div class="hero-content">
      <h1 class="gallery-title">
        <span class="title-line">Visual</span>
        <span class="title-line accent">Journey</span>
      </h1>
      <p class="gallery-intro">
        Discover the essence of Lebanese hospitality through our curated collection of moments and spaces
      </p>
    </div>
    <div class="hero-gradient"></div>
  </section>

  <section class="gallery-main">
    <div class="gallery-controls">
      <div class="filter-tabs" role="tablist">
        {categories.map((category) => (
          <button 
            class={`filter-btn ${category === 'all' ? 'active' : ''}`}
            data-category={category}
            role="tab"
            aria-selected={category === 'all' ? 'true' : 'false'}
          >
            {category === 'all' ? 'All' : category.charAt(0).toUpperCase() + category.slice(1)}
          </button>
        ))}
      </div>
      
      <div class="view-controls">
        <button class="view-btn active" data-view="masonry" aria-label="Masonry view">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
            <rect x="3" y="3" width="7" height="7" rx="1"/>
            <rect x="14" y="3" width="7" height="4" rx="1"/>
            <rect x="14" y="9" width="7" height="7" rx="1"/>
            <rect x="3" y="12" width="7" height="9" rx="1"/>
          </svg>
        </button>
        <button class="view-btn" data-view="grid" aria-label="Grid view">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
            <rect x="3" y="3" width="7" height="7" rx="1"/>
            <rect x="14" y="3" width="7" height="7" rx="1"/>
            <rect x="3" y="14" width="7" height="7" rx="1"/>
            <rect x="14" y="14" width="7" height="7" rx="1"/>
          </svg>
        </button>
      </div>
    </div>

    <div class="gallery-container">
      <div class="gallery-grid masonry" id="gallery-grid">
        {images.map((image, index) => (
          <article 
            class="gallery-item" 
            data-category={image.category}
            data-index={index}
          >
          <div class="image-container">
            <div class="image-placeholder"></div>
            <div class="gallery-image">
              <img
                src="data:image/svg+xml,%3csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%201%201'%3e%3c/svg%3e"
                alt={image.title}
                loading="lazy"
                data-src={`/images/${image.file}`}
                data-webp={`/images/${toWebp(image.file)}`}
              />
            </div>
              
              <div class="image-overlay">
                <div class="overlay-content">
                  <h3 class="image-title">{image.title}</h3>
                  <p class="image-description">{image.description}</p>
                  <button class="view-btn-overlay" data-index={index}>
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
                    </svg>
                    View Full Size
                  </button>
                </div>
              </div>
            </div>
          </article>
        ))}
      </div>
    </div>
  </section>

  <!-- Advanced Lightbox -->
  <div class="lightbox" id="lightbox" role="dialog" aria-modal="true" aria-hidden="true">
    <div class="lightbox-backdrop"></div>
    <div class="lightbox-container">
      <button class="lightbox-close" aria-label="Close lightbox">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      
      <button class="lightbox-nav prev" aria-label="Previous image">
        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="15,18 9,12 15,6"></polyline>
        </svg>
      </button>
      
      <button class="lightbox-nav next" aria-label="Next image">
        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <polyline points="9,18 15,12 9,6"></polyline>
        </svg>
      </button>
      
      <div class="lightbox-content">
        <div class="lightbox-image-container">
          <img class="lightbox-image" src="" alt="" />
          <div class="lightbox-loader">
            <div class="loader-spinner"></div>
          </div>
        </div>
        
        <div class="lightbox-info">
          <h2 class="lightbox-title"></h2>
          <p class="lightbox-description"></p>
          <div class="lightbox-meta">
            <span class="image-counter"></span>
            <div class="lightbox-actions">
              <button class="action-btn" id="share-btn" aria-label="Share image">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M4 12v8a2 2 0 002 2h12a2 2 0 002-2v-8"/>
                  <polyline points="16,6 12,2 8,6"/>
                  <line x1="12" y1="2" x2="12" y2="15"/>
                </svg>
                Share
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <style>
    * {
      box-sizing: border-box;
    }

    :root {
      --primary: #1a1a1a;
      --accent: #d4af37;
      --text: #333;
      --text-light: #666;
      --text-lighter: #999;
      --bg: #ffffff;
      --bg-light: #f8f9fa;
      --border: #e1e5e9;
      --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      --shadow-lg: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
      --radius: 16px;
      --radius-sm: 8px;
      --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      --bounce: cubic-bezier(0.68, -0.55, 0.265, 1.55);
    }

    /* Hero Section */
    .gallery-hero {
      position: relative;
      height: 60vh;
      min-height: 400px;
      display: flex;
      align-items: center;
      justify-content: center;
      background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
      overflow: hidden;
    }

    .gallery-hero::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E");
      animation: float 20s infinite linear;
    }

    @keyframes float {
      0% { transform: translateY(0px); }
      100% { transform: translateY(-60px); }
    }

    .hero-content {
      text-align: center;
      color: white;
      z-index: 2;
      position: relative;
    }

    .gallery-title {
      font-size: clamp(3rem, 8vw, 6rem);
      font-weight: 800;
      margin: 0;
      line-height: 0.9;
      letter-spacing: -0.02em;
    }

    .title-line {
      display: block;
      animation: slideUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
      opacity: 0;
      transform: translateY(60px);
    }

    .title-line:nth-child(2) {
      animation-delay: 0.2s;
    }

    .title-line.accent {
      background: linear-gradient(45deg, var(--accent), #f4d03f);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
      background-clip: text;
    }

    @keyframes slideUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .gallery-intro {
      font-size: 1.25rem;
      margin: 2rem 0 0;
      max-width: 600px;
      opacity: 0.9;
      animation: fadeInUp 1s cubic-bezier(0.4, 0, 0.2, 1) 0.5s forwards;
      opacity: 0;
    }

    @keyframes fadeInUp {
      to {
        opacity: 0.9;
        transform: translateY(0);
      }
      from {
        transform: translateY(20px);
      }
    }

    .hero-gradient {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 100px;
      background: linear-gradient(to bottom, transparent, var(--bg));
      z-index: 1;
    }

    /* Main Gallery */
    .gallery-main {
      padding: 4rem 2rem;
      max-width: 1600px;
      margin: 0 auto;
    }

    .gallery-controls {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 3rem;
      gap: 2rem;
      flex-wrap: wrap;
    }

    .filter-tabs {
      display: flex;
      gap: 0.5rem;
      background: var(--bg-light);
      padding: 4px;
      border-radius: var(--radius);
      border: 1px solid var(--border);
    }

    .filter-btn {
      padding: 0.75rem 1.5rem;
      border: none;
      background: transparent;
      color: var(--text-light);
      font-weight: 500;
      border-radius: var(--radius-sm);
      cursor: pointer;
      transition: var(--transition);
      white-space: nowrap;
      text-transform: capitalize;
    }

    .filter-btn:hover {
      background: rgba(255, 255, 255, 0.8);
      color: var(--text);
    }

    .filter-btn.active {
      background: white;
      color: var(--primary);
      box-shadow: var(--shadow);
    }

    .view-controls {
      display: flex;
      gap: 0.5rem;
      background: var(--bg-light);
      padding: 4px;
      border-radius: var(--radius-sm);
      border: 1px solid var(--border);
    }

    .view-btn {
      padding: 0.75rem;
      border: none;
      background: transparent;
      color: var(--text-light);
      cursor: pointer;
      border-radius: 6px;
      transition: var(--transition);
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .view-btn:hover {
      background: rgba(255, 255, 255, 0.8);
      color: var(--text);
    }

    .view-btn.active {
      background: white;
      color: var(--primary);
      box-shadow: var(--shadow);
    }

    /* Gallery Grid */
    .gallery-container {
      position: relative;
    }

    .gallery-grid {
      display: grid;
      gap: 2rem;
      transition: var(--transition);
    }

    .gallery-grid.masonry {
      grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
      grid-auto-rows: 10px;
    }

    .gallery-grid.grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }

    .gallery-item {
      opacity: 1;
      transform: scale(1);
      transition: var(--transition);
    }

    .gallery-item.hidden {
      opacity: 0;
      transform: scale(0.8);
      pointer-events: none;
    }

    .image-container {
      position: relative;
      border-radius: var(--radius);
      overflow: hidden;
      background: var(--bg-light);
      cursor: pointer;
      transition: var(--transition);
      height: 100%;
    }

    .gallery-grid.masonry .image-container {
      height: auto;
    }

    .gallery-grid.grid .image-container {
      height: 280px;
    }

    .image-placeholder {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: shimmer 2s infinite;
    }

    @keyframes shimmer {
      0% { background-position: -200% 0; }
      100% { background-position: 200% 0; }
    }

    .gallery-image {
      display: block;
      width: 100%;
      height: 100%;
    }

    .gallery-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
      transition: var(--transition);
      opacity: 0;
    }

    .gallery-image img.loaded {
      opacity: 1;
    }

    .gallery-grid.masonry .gallery-image img {
      height: auto;
      min-height: 200px;
      max-height: 500px;
    }

    .image-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(to bottom, transparent 40%, rgba(0, 0, 0, 0.8));
      opacity: 0;
      transition: var(--transition);
      display: flex;
      align-items: flex-end;
      padding: 2rem;
    }

    .image-container:hover .image-overlay {
      opacity: 1;
    }

    .image-container:hover {
      transform: translateY(-4px);
      box-shadow: var(--shadow-lg);
    }

    .image-container:hover .gallery-image img {
      transform: scale(1.05);
    }

    .overlay-content {
      color: white;
      width: 100%;
    }

    .image-title {
      font-size: 1.25rem;
      font-weight: 600;
      margin: 0 0 0.5rem;
      line-height: 1.3;
    }

    .image-description {
      font-size: 0.9rem;
      margin: 0 0 1rem;
      opacity: 0.9;
      line-height: 1.4;
    }

    .view-btn-overlay {
      background: rgba(255, 255, 255, 0.2);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(255, 255, 255, 0.3);
      color: white;
      padding: 0.75rem 1rem;
      border-radius: var(--radius-sm);
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
      font-weight: 500;
    }

    .view-btn-overlay:hover {
      background: rgba(255, 255, 255, 0.3);
      transform: translateY(-2px);
    }

    /* Lightbox */
    .lightbox {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1000;
      opacity: 0;
      visibility: hidden;
      transition: var(--transition);
    }

    .lightbox.active {
      opacity: 1;
      visibility: visible;
    }

    .lightbox-backdrop {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.95);
      backdrop-filter: blur(10px);
    }

    .lightbox-container {
      position: relative;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 2rem;
    }

    .lightbox-close {
      position: absolute;
      top: 2rem;
      right: 2rem;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
      width: 48px;
      height: 48px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
      z-index: 10;
    }

    .lightbox-close:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: scale(1.1);
    }

    .lightbox-nav {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
      width: 56px;
      height: 56px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: var(--transition);
      z-index: 10;
    }

    .lightbox-nav:hover {
      background: rgba(255, 255, 255, 0.2);
      transform: translateY(-50%) scale(1.1);
    }

    .lightbox-nav.prev {
      left: 2rem;
    }

    .lightbox-nav.next {
      right: 2rem;
    }

    .lightbox-content {
      max-width: 90vw;
      max-height: 90vh;
      display: flex;
      flex-direction: column;
      gap: 2rem;
      background: rgba(255, 255, 255, 0.05);
      border-radius: var(--radius);
      border: 1px solid rgba(255, 255, 255, 0.1);
      overflow: hidden;
      backdrop-filter: blur(20px);
    }

    .lightbox-image-container {
      position: relative;
      flex: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      min-height: 60vh;
    }

    .lightbox-image {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain;
      border-radius: var(--radius-sm);
      opacity: 0;
      transition: opacity 0.5s ease;
    }

    .lightbox-image.loaded {
      opacity: 1;
    }

    .lightbox-loader {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .loader-spinner {
      width: 40px;
      height: 40px;
      border: 3px solid rgba(255, 255, 255, 0.3);
      border-top: 3px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .lightbox-info {
      background: rgba(0, 0, 0, 0.8);
      backdrop-filter: blur(10px);
      padding: 2rem;
      color: white;
    }

    .lightbox-title {
      font-size: 1.5rem;
      font-weight: 600;
      margin: 0 0 0.5rem;
    }

    .lightbox-description {
      font-size: 1rem;
      margin: 0 0 1.5rem;
      opacity: 0.9;
      line-height: 1.6;
    }

    .lightbox-meta {
      display: flex;
      justify-content: space-between;
      align-items: center;
      flex-wrap: wrap;
      gap: 1rem;
    }

    .image-counter {
      font-size: 0.9rem;
      opacity: 0.7;
    }

    .lightbox-actions {
      display: flex;
      gap: 1rem;
    }

    .action-btn {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: white;
      padding: 0.75rem 1rem;
      border-radius: var(--radius-sm);
      cursor: pointer;
      transition: var(--transition);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-size: 0.9rem;
    }

    .action-btn:hover {
      background: rgba(255, 255, 255, 0.2);
    }

    /* Responsive Design */
    @media (max-width: 768px) {
      .gallery-hero {
        height: 50vh;
        min-height: 300px;
      }

      .gallery-main {
        padding: 2rem 1rem;
      }

      .gallery-controls {
        flex-direction: column;
        align-items: stretch;
        gap: 1rem;
      }

      .filter-tabs {
        overflow-x: auto;
        scrollbar-width: none;
        -ms-overflow-style: none;
      }

      .filter-tabs::-webkit-scrollbar {
        display: none;
      }

      .gallery-grid {
        gap: 1rem;
      }

      .gallery-grid.masonry {
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
      }

      .lightbox-container {
        padding: 1rem;
      }

      .lightbox-content {
        max-width: 95vw;
        max-height: 95vh;
      }

      .lightbox-close {
        top: 1rem;
        right: 1rem;
      }

      .lightbox-nav {
        width: 48px;
        height: 48px;
      }

      .lightbox-nav.prev {
        left: 1rem;
      }

      .lightbox-nav.next {
        right: 1rem;
      }

      .lightbox-info {
        padding: 1.5rem;
      }

      .lightbox-meta {
        flex-direction: column;
        align-items: flex-start;
      }
    }

    @media (max-width: 480px) {
      .gallery-grid.masonry {
        grid-template-columns: 1fr;
      }

      .image-overlay {
        padding: 1rem;
      }

      .lightbox-nav {
        display: none;
      }
    }
  </style>

  <script>
    interface ImageData {
      file: string;
      category: string;
      title: string;
      description: string;
    }

    class PremiumGallery {
      private images: ImageData[] = [];
      private currentIndex = 0;
      private filteredImages: ImageData[] = [];
      private lightbox: HTMLElement;
      private galleryGrid: HTMLElement;

      constructor() {
        this.init();
      }

      private init(): void {
        this.setupImageData();
        this.setupElements();
        this.setupEventListeners();
        this.setupIntersectionObserver();
        this.setupKeyboardNavigation();
        this.setupTouchGestures();
        this.loadImages();
      }

      private setupImageData(): void {
        this.images = [
          { file: 'pool.jpg', category: 'exterior', title: 'Infinity Pool Oasis', description: 'Stunning infinity pool overlooking the Mediterranean coastline' },
          { file: 'sunset.jpg', category: 'views', title: 'Golden Hour Magic', description: 'Breathtaking sunset views from our panoramic terrace' },
          { file: 'interior.jpg', category: 'interior', title: 'Elegant Living Space', description: 'Thoughtfully designed interiors with modern Lebanese touches' },
          { file: 'fireplace.jpg', category: 'interior', title: 'Cozy Fireplace Lounge', description: 'Intimate gathering space with traditional stone fireplace' },
          { file: 'citadel.jpg', category: 'views', title: 'Historic Citadel Views', description: 'Ancient architecture meets modern comfort' },
          { file: 'breakfast.jpg', category: 'dining', title: 'Morning Delights', description: 'Fresh local breakfast served with mountain views' },
          { file: 'garden.jpg', category: 'exterior', title: 'Mediterranean Gardens', description: 'Lush gardens with native flora and peaceful corners' },
          { file: 'bedroom.jpg', category: 'interior', title: 'Serene Bedroom Suite', description: 'Peaceful retreat with premium linens and natural light' },
          { file: 'terrace.jpg', category: 'exterior', title: 'Panoramic Terrace', description: 'Expansive outdoor living with spectacular vistas' },
        ];
        this.filteredImages = [...this.images];
      }

      private setupElements(): void {
        this.lightbox = document.getElementById('lightbox')!;
        this.galleryGrid = document.getElementById('gallery-grid')!;
      }

      private setupEventListeners(): void {
        // Filter buttons
        const filterBtns = document.querySelectorAll('.filter-btn');
        filterBtns.forEach(btn => {
          btn.addEventListener('click', (e) => this.handleFilter(e));
        });

        // View toggle buttons
        const viewBtns = document.querySelectorAll('.view-btn');
        viewBtns.forEach(btn => {
          btn.addEventListener('click', (e) => this.handleViewToggle(e));
        });

        // Gallery items
        const galleryItems = document.querySelectorAll('.gallery-item');
        galleryItems.forEach(item => {
          item.addEventListener('click', (e) => this.handleImageClick(e));
        });

        // Lightbox controls
        const lightboxClose = document.querySelector('.lightbox-close');
        const lightboxBackdrop = document.querySelector('.lightbox-backdrop');
        const prevBtn = document.querySelector('.lightbox-nav.prev');
        const nextBtn = document.querySelector('.lightbox-nav.next');

        lightboxClose?.addEventListener('click', () => this.closeLightbox());
        lightboxBackdrop?.addEventListener('click', () => this.closeLightbox());
        prevBtn?.addEventListener('click', () => this.previousImage());
        nextBtn?.addEventListener('click', () => this.nextImage());

        // Share button
        const shareBtn = document.getElementById('share-btn');
        shareBtn?.addEventListener('click', () => this.shareImage());
      }

      private setupIntersectionObserver(): void {
        const imageObserver = new IntersectionObserver(
          (entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const img = entry.target as HTMLImageElement;
                this.loadImage(img);
                imageObserver.unobserve(img);
              }
            });
          },
          { rootMargin: '50px' }
        );

        const images = document.querySelectorAll('.gallery-image img');
        images.forEach(img => imageObserver.observe(img));
      }

      private setupKeyboardNavigation(): void {
        document.addEventListener('keydown', (e) => {
          if (!this.lightbox.classList.contains('active')) return;
          
          switch (e.key) {
            case 'Escape':
              this.closeLightbox();
              break;
            case 'ArrowLeft':
              this.previousImage();
              break;
            case 'ArrowRight':
              this.nextImage();
              break;
          }
        });
      }

      private setupTouchGestures(): void {
        let startX = 0;
        let startY = 0;

        this.lightbox.addEventListener('touchstart', (e) => {
          startX = e.touches[0].clientX;
          startY = e.touches[0].clientY;
        });

        this.lightbox.addEventListener('touchmove', (e) => {
          e.preventDefault();
        });

        this.lightbox.addEventListener('touchend', (e) => {
          if (!this.lightbox.classList.contains('active')) return;
          
          const endX = e.changedTouches[0].clientX;
          const endY = e.changedTouches[0].clientY;
          const diffX = startX - endX;
          const diffY = startY - endY;

          // Horizontal swipe
          if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
            if (diffX > 0) {
              this.nextImage();
            } else {
              this.previousImage();
            }
          }
          // Vertical swipe down to close
          else if (diffY < -100) {
            this.closeLightbox();
          }
        });
      }

      private loadImages(): void {
        const images = document.querySelectorAll('.gallery-image img');
        images.forEach(img => {
          this.loadImage(img as HTMLImageElement);
        });
      }

      private loadImage(img: HTMLImageElement): void {
        const src = img.dataset.src;
        const webpSrc = img.dataset.webp;
        
        if (!src) return;

        const tempImg = new Image();
        
        // Success handler - image loaded successfully
        tempImg.onload = () => {
          img.src = tempImg.src;
          img.classList.add('loaded');
          const placeholder = img.closest('.image-container')?.querySelector('.image-placeholder');
          if (placeholder) {
            (placeholder as HTMLElement).style.opacity = '0';
            setTimeout(() => placeholder.remove(), 300);
          }
        };

        // ERROR HANDLER - This is the key addition!
        tempImg.onerror = () => {
          console.log('WebP failed, falling back to JPG:', src);
          // Remove the error handler to avoid infinite loops
          tempImg.onerror = null;
          // Try the JPG version
          tempImg.src = src;
        };

        // Try WebP first if browser supports it AND we have a WebP URL
        if (webpSrc && this.supportsWebP()) {
          console.log('Trying WebP first:', webpSrc);
          tempImg.src = webpSrc;
        } else {
          console.log('Using JPG directly:', src);
          tempImg.src = src;
        }
      }

      private supportsWebP(): boolean {
        const canvas = document.createElement('canvas');
        canvas.width = 1;
        canvas.height = 1;
        return canvas.toDataURL('image/webp').indexOf('data:image/webp') === 0;
      }

      private handleFilter(e: Event): void {
        const btn = e.target as HTMLButtonElement;
        const category = btn.dataset.category;
        
        if (!category) return;

        // Update active button
        document.querySelectorAll('.filter-btn').forEach(b => {
          b.classList.remove('active');
          b.setAttribute('aria-selected', 'false');
        });
        btn.classList.add('active');
        btn.setAttribute('aria-selected', 'true');

        // Filter images with animation
        this.filterImages(category);
      }

      private filterImages(category: string): void {
        const items = document.querySelectorAll('.gallery-item');
        
        items.forEach((item, index) => {
          const itemCategory = (item as HTMLElement).dataset.category;
          const shouldShow = category === 'all' || itemCategory === category;
          
          setTimeout(() => {
            if (shouldShow) {
              item.classList.remove('hidden');
            } else {
              item.classList.add('hidden');
            }
          }, index * 50);
        });

        // Update filtered images for lightbox navigation
        if (category === 'all') {
          this.filteredImages = [...this.images];
        } else {
          this.filteredImages = this.images.filter(img => img.category === category);
        }
      }

      private handleViewToggle(e: Event): void {
        const btn = e.target as HTMLButtonElement;
        const view = btn.dataset.view;
        
        if (!view) return;

        // Update active button
        document.querySelectorAll('.view-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');

        // Toggle grid class
        this.galleryGrid.className = `gallery-grid ${view}`;

        // Trigger masonry layout if needed
        if (view === 'masonry') {
          this.layoutMasonry();
        }
      }

      private layoutMasonry(): void {
        const items = document.querySelectorAll('.gallery-item:not(.hidden)');
        
        items.forEach((item, index) => {
          const img = item.querySelector('img') as HTMLImageElement;
          if (img && img.complete) {
            const height = img.naturalHeight;
            const spans = Math.ceil(height / 200);
            (item as HTMLElement).style.gridRowEnd = `span ${spans}`;
          }
        });
      }

      private handleImageClick(e: Event): void {
        e.preventDefault();
        const item = (e.target as Element).closest('.gallery-item') as HTMLElement;
        const index = parseInt(item.dataset.index || '0');
        
        this.currentIndex = index;
        this.openLightbox();
      }

      private openLightbox(): void {
        this.lightbox.classList.add('active');
        this.lightbox.setAttribute('aria-hidden', 'false');
        document.body.style.overflow = 'hidden';
        
        this.updateLightboxContent();
      }

      private closeLightbox(): void {
        this.lightbox.classList.remove('active');
        this.lightbox.setAttribute('aria-hidden', 'true');
        document.body.style.overflow = '';
      }

      private previousImage(): void {
        this.currentIndex = this.currentIndex > 0 ? this.currentIndex - 1 : this.images.length - 1;
        this.updateLightboxContent();
      }

      private nextImage(): void {
        this.currentIndex = this.currentIndex < this.images.length - 1 ? this.currentIndex + 1 : 0;
        this.updateLightboxContent();
      }

      private updateLightboxContent(): void {
        const image = this.images[this.currentIndex];
        if (!image) return;

        const lightboxImg = document.querySelector('.lightbox-image') as HTMLImageElement;
        const lightboxTitle = document.querySelector('.lightbox-title') as HTMLElement;
        const lightboxDesc = document.querySelector('.lightbox-description') as HTMLElement;
        const imageCounter = document.querySelector('.image-counter') as HTMLElement;
        const loader = document.querySelector('.lightbox-loader') as HTMLElement;

        // Show loader
        if (loader) loader.style.display = 'block';
        if (lightboxImg) lightboxImg.classList.remove('loaded');

        // Update content
        if (lightboxTitle) lightboxTitle.textContent = image.title;
        if (lightboxDesc) lightboxDesc.textContent = image.description;
        if (imageCounter) {
          imageCounter.textContent = `${this.currentIndex + 1} of ${this.images.length}`;
        }

        // Load high-res image with fallback
        const tempImg = new Image();
        
        // Success handler
        tempImg.onload = () => {
          if (lightboxImg) {
            lightboxImg.src = tempImg.src;
            lightboxImg.alt = image.title;
            lightboxImg.classList.add('loaded');
          }
          if (loader) loader.style.display = 'none';
        };

        // ERROR HANDLER for lightbox too!
        tempImg.onerror = () => {
          console.log('Lightbox WebP failed, falling back to JPG');
          tempImg.onerror = null; // Prevent infinite loops
          const originalSrc = `/images/${image.file}`;
          tempImg.src = originalSrc;
        };

        // Try WebP first, fallback to JPG
        const webpSrc = `/images/${this.toWebp(image.file)}`;
        const originalSrc = `/images/${image.file}`;
        
        if (this.supportsWebP()) {
          console.log('Lightbox trying WebP:', webpSrc);
          tempImg.src = webpSrc;
        } else {
          console.log('Lightbox using JPG:', originalSrc);
          tempImg.src = originalSrc;
        }
      }

      private shareImage(): void {
        const image = this.images[this.currentIndex];
        if (!image) return;

        if (navigator.share) {
          navigator.share({
            title: image.title,
            text: image.description,
            url: window.location.href
          }).catch(console.error);
        } else {
          // Fallback: copy URL to clipboard
          navigator.clipboard.writeText(window.location.href).then(() => {
            // Could show a toast notification here
            console.log('URL copied to clipboard');
          }).catch(console.error);
        }
      }

      private toWebp(file: string): string {
        return file.replace('.jpg', '.webp');
      }
    }

    // Initialize gallery when DOM is loaded
    document.addEventListener('DOMContentLoaded', () => {
      new PremiumGallery();
    });

    // Smooth scroll effect for hero section
    window.addEventListener('scroll', () => {
      const hero = document.querySelector('.gallery-hero') as HTMLElement;
      if (hero) {
        const scrolled = window.pageYOffset;
        const rate = scrolled * -0.5;
        hero.style.transform = `translate3d(0, ${rate}px, 0)`;
      }
    });

    // Performance optimization: Preload next/previous images
    let preloadedImages: Set<string> = new Set();
    
    function preloadImage(src: string): void {
      if (preloadedImages.has(src)) return;
      
      const link = document.createElement('link');
      link.rel = 'preload';
      link.as = 'image';
      link.href = src;
      document.head.appendChild(link);
      preloadedImages.add(src);
    }

    // Accessibility improvements
    document.addEventListener('keydown', (e) => {
      // Focus management for gallery navigation
      if (e.key === 'Tab') {
        const focusableElements = document.querySelectorAll(
          'button:not([disabled]), [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
        );
        
        const firstElement = focusableElements[0] as HTMLElement;
        const lastElement = focusableElements[focusableElements.length - 1] as HTMLElement;
        
        if (e.shiftKey && document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        } else if (!e.shiftKey && document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      }
    });
  </script>
</Layout>