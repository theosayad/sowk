---
/* IntroAnimation component */
---
<!-- 1️⃣ Load p5.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.0/p5.min.js"></script>

<style>
  /* ────────── layout ────────── */
  .intro-container {
    position: fixed; inset: 0;
    background: #f8f9fa;
    display: flex; flex-direction: column; align-items: center;
    padding-top: 2.5rem; gap: 2rem;
    font-family: 'Comic Sans MS', cursive;
    overflow: hidden; z-index: 1000;
  }
  #p5-canvas { position: absolute; inset: 0; z-index: 0; pointer-events: none; }

  /* ────────── typewriter ────────── */
  .typewriter {
    font-size: clamp(1rem, 4vw, 1.8rem);
    color: #2d3748;
    white-space: nowrap; overflow: hidden;
    border-right: 3px solid #4a5568;
    animation: typing 6s steps(62,end) forwards, blink .8s step-end infinite;
    max-width: 90%; text-align: center; z-index: 5;
  }
  @keyframes typing { from { width: 0 } to { width: 100% } }
  @keyframes blink  { 50% { border-color: transparent } }

  /* ────────── falling letters ────────── */
  #letterContainer { position: relative; z-index: 5; }
  .letter {
    position: absolute;
    font: bold 2rem 'Comic Sans MS';
    color: #e53e3e;
    opacity: 0;
    pointer-events: none;
    transition: transform 1s cubic-bezier(.25,.46,.45,.94), opacity .2s;
  }
  .letter.falling { opacity: 1 }

  /* ────────── fade out ────────── */
  .intro-container.fade-out {
    animation: fadeOut 1s ease-out forwards;
  }
  @keyframes fadeOut { to { opacity: 0; pointer-events: none } }
</style>

<div class="intro-container" id="intro">
  <div id="p5-canvas"></div>

  <div class="typewriter" id="sentence">
    Hi there! From here onwards, please drop off all your worries.
  </div>

  <div id="letterContainer"></div>
</div>

<script type="module">
  // ────────── session guard ──────────
  if (sessionStorage.getItem('introPlayed')) {
    document.getElementById('intro').remove();
  } else {
    sessionStorage.setItem('introPlayed','true');
  }

  // ────────── helper to drop "worries" ──────────
  function dropWorries(atX, atY) {
    const line = document.getElementById('sentence');
    const word = 'worries';
    line.textContent = line.textContent.replace(word,'______');

    [...word].forEach((ch, i) => {
      const el = document.createElement('div');
      el.className = 'letter';
      el.textContent = ch;
      el.style.left = `${atX}px`;
      el.style.top  = `${atY}px`;
      document.getElementById('letterContainer').appendChild(el);

      setTimeout(() => {
        const spread = (i-(word.length-1)/2)*40;
        const drop   = Math.random()*30 + 160;
        const rot    = (Math.random()-0.5)*360;
        el.style.transform = `translate(${spread}px,${drop}px) rotate(${rot}deg)`;
        el.classList.add('falling');
      }, 50);
    });
  }

  function fadeAway() {
    const intro = document.getElementById('intro');
    intro.classList.add('fade-out');
    setTimeout(()=> intro.remove(), 1000);
  }

  // ────────── p5 sketch ──────────
  new p5(p => {
    class Truck {
      constructor() {
        this.reset();
        this.dropped = false;
        this.left    = false;
      }
      reset() {
        this.x = -600;
        this.y = p.height * 0.68;
        this.speed = 4;
        this.state = 'IN';
        this.parkTime = 0;
      }
      update() {
        if (this.state === 'IN') {
          this.x += this.speed;
          if (this.x >= p.width * 0.33) {
            this.state = 'PARKED';
            this.parkTime = p.millis();
          }
        }
        else if (this.state === 'PARKED') {
          // drop worries once, 0.8s after parked
          if (!this.dropped && p.millis() - this.parkTime > 800) {
            this.dropped = true;
            // compute exact bed-right coords in screen pixels
            const canvasRect = p.select('canvas').elt.getBoundingClientRect();
            const bedLocalX = 530;    // right-top corner of bed in p5 coords
            const bedLocalY = -160;   // top edge of bed
            const dropX = canvasRect.left + (this.x + bedLocalX) * 0.55;
            const dropY = canvasRect.top  + (this.y + bedLocalY) * 0.55;
            dropWorries(dropX, dropY);
          }
          // depart after 4.5s parked
          if (p.millis() - this.parkTime > 4500) {
            this.state = 'OUT';
          }
        }
        else if (this.state === 'OUT') {
          this.x += this.speed;
          if (!this.left && this.x > p.width + 600) {
            this.left = true;
            fadeAway();
          }
        }
      }
      display() {
        p.push();
        p.translate(this.x, this.y);
        p.scale(0.55);

        /* wheels */
        p.noStroke(); p.fill(35);
        p.ellipse(0,0,240,240);
        p.ellipse(360,0,240,240);
        p.fill(95,73,12);
        p.ellipse(0,0,140,140);
        p.ellipse(360,0,140,140);

        /* bed */
        p.fill(229,178,45);
        p.rect(-120,-160,600,90);
        p.quad(-120,-160,530,-160,560,-70,-150,-70);

        /* cab */
        p.rect(200,-220,160,150);
        p.fill(30);
        p.rect(220,-210,50,60);
        p.rect(285,-210,55,60);
        p.fill(229,178,45);
        p.rect(160,-260,260,40);

        /* logos */
        p.fill(30); p.rect(-40,-135,90,45,6);
        p.fill(255); p.textSize(26); p.textAlign(p.CENTER,p.CENTER);
        p.text('CAT',5,-112);
        p.fill(30); p.rect(245,-50,55,30,4);
        p.fill(255); p.textSize(18);
        p.text('793',272,-36);

        p.pop();
      }
    }

    let truck;
    p.setup = () => {
      const c = p.createCanvas(window.innerWidth,window.innerHeight);
      c.parent('p5-canvas');
      truck = new Truck();
    };
    p.draw = () => {
      p.clear();
      truck.update();
      truck.display();
    };
    p.windowResized = () => {
      p.resizeCanvas(window.innerWidth, window.innerHeight);
      truck.reset();
    };
  });
</script>
